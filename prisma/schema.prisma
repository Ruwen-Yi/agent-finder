// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Agent {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  phone           String
  bio             String
  address         Address?
  services        Service[] // An agent has one or more services
  specializations Specialization[] // An agent has one or more specializations
  comments        Comment[] // An agent has one or more comments
}

model Address {
  id      String  @id @default(cuid())
  unit    String?
  street  String
  city    String
  state   String
  postal  Int
  agent   Agent   @relation(fields: [agentId], references: [id])
  agentId String  @unique // An address maps to a unique agent
}

model Service {
  id           String @id @default(cuid())
  serviceName  String
  servicePrice Float
  serviceIntro String
  agent        Agent  @relation(fields: [agentId], references: [id])
  agentId      String // A service must map to an agent
                      // Multiple services can map to the same agentId (many to one)
}

model Specialization {
  id                 String             @id @default(cuid())
  specializationName SpecializationName @default(Visa_Applications)
  agent              Agent              @relation(fields: [agentId], references: [id])
  agentId            String // A specialization must map to an agent
}

model Comment {
  id      String @id @default(cuid())
  content String

  agent    Agent  @relation(fields: [agentId], references: [id])
  agentId  String // A comment must map to an agent
  client   Client @relation(fields: [clientId], references: [id])
  clientId String // A comment must map to a client
}

model Client {
  id       String    @id @default(cuid())
  name     String
  email    String
  comments Comment[] // A client has zero or more comments
}

enum SpecializationName {
  Visa_Applications
  Permanent_Residency
  Citizenship
  Family_Sponsorship
}
